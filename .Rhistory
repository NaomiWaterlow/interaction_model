symmetric = T)
#Define age groups wanted, Need to include at least 0,2,5
Age_groups <- c(0, 2, 5, 16, 65)
# Load the packages
setwd("~/Documents/GitHub/interaction_model")
source("setup.R")
#Make mixing matrix using UK Polymod contact matrix
setwd("~/Documents/GitHub/interaction_model")
source("Mixing_UK_Ages.R")
# Source the model
setwd("~/Documents/GitHub/interaction_model")
sourceCpp("Flex_age_model_trickle.cpp")
#Age group specific variables
RSV_Sus <- c(1, 0.75, rep(0.65, (length(Age_groups) - 2)))
Pop_sizes <- unname(unlist(UK_structure$demography[, "population"]))
Start_Sus <- c(1, 0.688, rep(0.525, (length(Age_groups) - 2)))
#Fixed parameters
times <- seq(from = 1, to = 365, by = 1)
Parameters <- list(
bR = log(0.043),
bI = log(0.063),
l_sig = 0.5,
gammaR =  0.1111,
gammaI = 0.2632,
l_rho = 0.1,
Rdetect2 = 0.004,
Rdetect5 = 0.001,
Idetect = 0.002,
RSV_Sus = RSV_Sus,
Contact_Structure = Contact_structure,
num_grps = length(Age_groups),
seedI = 10,
seedR = 1,
trickleI = 0.1
)
# set up the initial donditions
initials <- c()
for (i in 1:length(Age_groups)) {
temp = c((Pop_sizes[i] * Start_Sus[i] - 1),
#SS
1,0, 0, 0,0,0, 0,0,(Pop_sizes[i] * (1 - Start_Sus[i])),
#IS,PS,RS,SI,II,PI,SP,IP,SR
0, 0, 0
#    ,0,0  #for tracking intros
)
#,RR,R_cases, I_cases
initials <- c(initials, temp)
}
outall <- as.data.table(ode(
y = initials,
t = times,
func = derivatives,
parms = Parameters,
method = "ode23"
))
#Name columns
Names <- c("time")
for (i in 1:length(Age_groups)) {
x <- c(
paste0("SS", i),
paste0("IS", i),
paste0("PS", i),
paste0("RS", i),
paste0("SI", i),
paste0("II", i),
paste0("PI", i),
paste0("SP", i),
paste0("IP", i),
paste0("SR", i),
paste0("RR", i),
paste0("Rcases", i),
paste0("Icases", i)
)
Names <- c(Names, x)
}
colnames(outall) <- Names
#Calculate incidence per time step, from cumulative incidence.
for (i in 1:length(Age_groups)) {
outall[, paste0("RSV_incidence_", i) :=
(get(paste0("Rcases", i)) - shift(get(paste0("Rcases", i)), 1L, type = "lag"))]
outall[, paste0("INF_incidence_", i) :=
(get(paste0("Icases", i)) - shift(get(paste0("Icases", i)), 1L, type = "lag"))]
outall[1, paste0("RSV_incidence_", i)] = 0
outall[1, paste0("INF_incidence_", i)] = 0
}
#Convert to weekly
outall$time <- as.Date(outall$time, origin = "2014-10-01")
outall$week_begin <- as.Date(cut(outall$time, breaks = "week"))
outall_weekly2 <- melt(outall, id = "week_begin")
outall_weekly2$value <- as.double(outall_weekly2$value)
out_weekly <- as.data.table(dcast(outall_weekly2, week_begin ~ variable, sum))
out_weekly <- out_weekly[-(dim(out_weekly))[1], ]
#Stocahstic observation process - only youngest two age categories
out_weekly[, Hos_RSV_0 := rbinom(dim(out_weekly)[1],round(RSV_incidence_1),
as.numeric(Parameters["Rdetect2"]))]
out_weekly[, Hos_INF_0 := rbinom(dim(out_weekly)[1],round(INF_incidence_1),
as.numeric(Parameters["Idetect"]))]
out_weekly[, Hos_RSV_1 := rbinom(dim(out_weekly)[1],round(RSV_incidence_2),
as.numeric(Parameters["Rdetect5"]))]
out_weekly[, Hos_INF_1 := rbinom(dim(out_weekly)[1],round(INF_incidence_2),
as.numeric(Parameters["Idetect"]))]
#Save the data
out_weekly[,(2:(15 * length(Age_groups) + 2)) := NULL]
simulation.data <- out_weekly
write.table((simulation.data), file = "Simulation_1", sep = ",")
getwd()
write.table((simulation.data), file = "/Data/Simulation_1", sep = ",")
write.table((simulation.data), file = "Documents/GitHub/interaction_model/Data/Simulation_1", sep = ",")
write.table((simulation.data), file = "~/Documents/GitHub/interaction_model/Data/Simulation_1", sep = ",")
Sim_no <- 1 # Choose which simulation to fit to
Sig_value <- 0.01 # true value
Rho_value <- 0.1 # true value
Adapt_start <- 10 # start adaption
Adapt_stop <- 500 # stop adaption
Length_run <- 1000 # length of run
seed_no <- 1 # whcih seed was used (as per file name)
seed <- 301
#Define number of agegroups
Age_groups <- c(0,2,5,16,65)
#print(getwd())
#setwd("home/lsh1402815")#/Core_INF_RSV_MODEL")
#load packages
source("Setup_CorrectModel_trickle.R")
getwd()
#print(getwd())
#setwd("home/lsh1402815")#/Core_INF_RSV_MODEL")
#load packages
source("Setup.R")
#Load in mcmcMH_function
source("mcmcMH_S.R")
#Load paramaters and summary statistics function
source("Params_and_summary_for_MCMC_cluster.R")
#Load paramaters and summary statistics function
source("Params_and_summary_for_MCMC.R")
set.seed(seed)
observed.data <-read.csv(paste0("Multiple_simulations",Sim_no,"_",seed_no))
simulation_overview <- read.csv("Multiple_sims_nov.csv")
simulation_overview <- read.csv("~Documents/GitHub/interaction_model/Data/Multiple_sims_nov.csv")
simulation_overview <- read.csv("~/Documents/GitHub/interaction_model/Data/Multiple_sims_nov.csv")
simulation_overview
set.seed(simulation_overview[simulation_ID, "Seed"])
# Choose which simulation to create
simulation_ID <- 1 # edit manually
simulation_overview <- read.csv("~/Documents/GitHub/interaction_model/Data/Multiple_sims_nov.csv")
set.seed(simulation_overview[simulation_ID, "Seed"])
# Load the packages
setwd("~/Documents/GitHub/interaction_model")
source("setup.R")
#Make mixing matrix using UK Polymod contact matrix
setwd("~/Documents/GitHub/interaction_model")
source("Mixing_UK_Ages.R")
# Source the model
setwd("~/Documents/GitHub/interaction_model")
sourceCpp("Flex_age_model_trickle.cpp")
#Age group specific variables
RSV_Sus <- c(1, 0.75, rep(0.65, (length(Age_groups) - 2)))
Pop_sizes <- unname(unlist(UK_structure$demography[, "population"]))
Start_Sus <- c(1, 0.688, rep(0.525, (length(Age_groups) - 2)))
#Fixed parameters
times <- seq(from = 1, to = 365, by = 1)
Parameters <- list(
bR = log(0.043),
bI = log(0.063),
l_sig = simulation_overview[simulation_ID, "Sigma"],
gammaR =  0.1111,
gammaI = 0.2632,
l_rho = simulation_overview[simulation_ID, "Rho"],
Rdetect2 = 0.004,
Rdetect5 = 0.001,
Idetect = 0.002,
RSV_Sus = RSV_Sus,
Contact_Structure = Contact_structure,
num_grps = length(Age_groups),
seedI = 10,
seedR = 1,
trickleI = 0.1
)
# set up the initial donditions
initials <- c()
for (i in 1:length(Age_groups)) {
temp = c((Pop_sizes[i] * Start_Sus[i] - 1),
#SS
1,0, 0, 0,0,0, 0,0,(Pop_sizes[i] * (1 - Start_Sus[i])),
#IS,PS,RS,SI,II,PI,SP,IP,SR
0, 0, 0
#    ,0,0  #for tracking intros
)
#,RR,R_cases, I_cases
initials <- c(initials, temp)
}
outall <- as.data.table(ode(
y = initials,
t = times,
func = derivatives,
parms = Parameters,
method = "ode23"
))
#Name columns
Names <- c("time")
for (i in 1:length(Age_groups)) {
x <- c(
paste0("SS", i),
paste0("IS", i),
paste0("PS", i),
paste0("RS", i),
paste0("SI", i),
paste0("II", i),
paste0("PI", i),
paste0("SP", i),
paste0("IP", i),
paste0("SR", i),
paste0("RR", i),
paste0("Rcases", i),
paste0("Icases", i)
)
Names <- c(Names, x)
}
colnames(outall) <- Names
#Calculate incidence per time step, from cumulative incidence.
for (i in 1:length(Age_groups)) {
outall[, paste0("RSV_incidence_", i) :=
(get(paste0("Rcases", i)) - shift(get(paste0("Rcases", i)), 1L, type = "lag"))]
outall[, paste0("INF_incidence_", i) :=
(get(paste0("Icases", i)) - shift(get(paste0("Icases", i)), 1L, type = "lag"))]
outall[1, paste0("RSV_incidence_", i)] = 0
outall[1, paste0("INF_incidence_", i)] = 0
}
#Convert to weekly
outall$time <- as.Date(outall$time, origin = "2014-10-01")
outall$week_begin <- as.Date(cut(outall$time, breaks = "week"))
outall_weekly2 <- melt(outall, id = "week_begin")
outall_weekly2$value <- as.double(outall_weekly2$value)
out_weekly <- as.data.table(dcast(outall_weekly2, week_begin ~ variable, sum))
out_weekly <- out_weekly[-(dim(out_weekly))[1], ]
#Stocahstic observation process - only youngest two age categories
out_weekly[, Hos_RSV_0 := rbinom(dim(out_weekly)[1],round(RSV_incidence_1),
as.numeric(Parameters["Rdetect2"]))]
out_weekly[, Hos_INF_0 := rbinom(dim(out_weekly)[1],round(INF_incidence_1),
as.numeric(Parameters["Idetect"]))]
out_weekly[, Hos_RSV_1 := rbinom(dim(out_weekly)[1],round(RSV_incidence_2),
as.numeric(Parameters["Rdetect5"]))]
out_weekly[, Hos_INF_1 := rbinom(dim(out_weekly)[1],round(INF_incidence_2),
as.numeric(Parameters["Idetect"]))]
#Save the data
out_weekly[,(2:(15 * length(Age_groups) + 2)) := NULL]
write.table((simulation.data), file = paste0("~/Documents/GitHub/interaction_model/Data/Simulation",
simulation_overview[simulation_ID,"Run"],
"_",
simulation_overview[simulation_ID,"Seed"]),
sep = ",")
simulation_overview
Sim_no <- 1 # Choose which simulation to fit to (from table)
# Choose the fitting parameters
Adapt_start <- 10 # start adaption
Adapt_stop <- 500 # stop adaption
Length_run <- 1000 # length of run
simulation_overview <- read.csv("~/Documents/GitHub/interaction_model/Data/Multiple_sims_nov.csv")
Sig_value <- simulation_overview[simulation_ID, "Sigma"] # true value
Rho_value <- simulation_overview[simulation_ID, "Rho"] # true value
seed <- 301
#Define number of agegroups
Age_groups <- c(0,2,5,16,65)
#print(getwd())
#setwd("home/lsh1402815")#/Core_INF_RSV_MODEL")
#load packages
source("Setup.R")
#Load in mcmcMH_function
source("mcmcMH_S.R")
#Load paramaters and summary statistics function
source("Params_and_summary_for_MCMC.R")
set.seed(seed)
observed.data <-read.csv(paste0("Multiple_simulations",Sim_no,"_",seed_no))
observed.data <-read.csv(paste0("Simulation",Sim_no,"_",seed_no))
observed.data <-read.csv(paste0("~/Documents/Github/interaction_model/Simulation",Sim_no,"_",seed_no))
observed.data <-read.csv(paste0("~/Documents/Github/interaction_model/Data/Simulation",Sim_no,"_",seed_no))
SIPR<-list()
SIPR$name <-"SIPR influenza and RSV"
Names <- c("time")
for(i in 1:length(Age_groups)){
x<-c(paste0("SS", i), paste0("IS", i),paste0("PS", i),paste0("RS", i),
paste0("SI", i),paste0("II", i),paste0("PI", i),paste0("SP", i),
paste0("IP", i), paste0("SR", i),paste0("RR", i),paste0("Rcases", i),paste0("Icases", i))
Names <- c(Names, x)
}
SIPR$state.names <- Names
SIPR$theta.names <- c("bR", "bI", "l_sig",'Rdetect2', 'Rdetect5', 'Idetect', 'l_rho', 'seedR', 'seedI')
SIPR$simulate <- function (theta, init.state, times)
{
outall <- as.data.table(ode(y=init.state,
t=times,
func = derivatives,
parms = theta,
method="ode23"))
trajectory <- summary_stats(outall)
trajectory[, Hos_RSV_0 := RSV_incidence_1*as.numeric(theta["Rdetect2"])]
trajectory[, Hos_INF_0 := INF_incidence_1*as.numeric(theta["Idetect"])]
trajectory[, Hos_RSV_1 := RSV_incidence_2*as.numeric(theta["Rdetect5"])]
trajectory[, Hos_INF_1 := INF_incidence_2*as.numeric(theta["Idetect"])]
#Sum of children
# trajectory[,Hos_c_RSV := (Hos_RSV_0 + Hos_RSV_1)]
# trajectory[,Hos_c_INF := (Hos_INF_0 + Hos_INF_1)]
# trajectory[,RSV_incidence_child := (RSV_incidence_0 + RSV_incidence_1)]
# trajectory[,INF_incidence_child := (INF_incidence_0 + INF_incidence_1)]
return(trajectory)
}
SIPR$dprior<-function (theta, log = FALSE)
{
# log.prior.bR <- dunif(as.numeric(theta["bR"]), min = 0, max = 1,
#                      log = TRUE)
# log.prior.bI <- dunif(as.numeric(theta["bI"]), min = 0, max = 1,
#            log = TRUE)
log.prior.bR <- dnorm((exp(as.numeric(theta["bR"]))*as.numeric(theta["R0ratR"])), mean=3, sd=0.6, log=T)
log.prior.bI <- dlnorm(((exp(as.numeric(theta["bI"]))*as.numeric(theta["R0ratI"])-1)), meanlog=0.3, sdlog=0.5,log=T)
log.prior.Rdetect2 <- dunif(as.numeric(theta["Rdetect2"]), min=0, max=1, log=TRUE)
log.prior.Rdetect5 <- dunif(as.numeric(theta["Rdetect5"]), min=0, max=1, log=TRUE)
log.prior.Idetect <- dunif(as.numeric(theta["Idetect"]), min=0, max=1, log=TRUE)
log.prior.seedI <- dunif(as.numeric(theta["seedI"]), min=0, max=60,log=T)
log.prior.seedR <- dunif(as.numeric(theta["seedR"]), min=0, max=60,log=T)
log.prior.sigma <- dunif(as.numeric(theta["l_sig"]), min=0, max=1,log=T)
log.prior.rho <- dunif(as.numeric(theta["l_rho"]), min=0.01, max = 1,log=T)
log.sum <- log.prior.bR + log.prior.bI +
log.prior.Rdetect2 + log.prior.Rdetect5 + log.prior.Idetect +
log.prior.seedR + log.prior.seedI +log.prior.sigma + log.prior.rho
return(ifelse(log, log.sum, exp(log.sum)))
}
SIPR$dPointObs_RSV<- function (data.point, model.point, theta, log = FALSE)
{
l<- dpois(x = data.point[["Hos_RSV_0"]], lambda = model.point[["Hos_RSV_0"]],
log = log)
m<- dpois(x = data.point[["Hos_RSV_1"]], lambda = model.point[["Hos_RSV_1"]],
log = log)
return(l+m)
}
SIPR$dPointObs_INF<- function (data.point, model.point, theta, log = FALSE)
{
l<- dpois(x = data.point[["Hos_INF_0"]], lambda = model.point[["Hos_INF_0"]],
log = log)
m<- dpois(x = data.point[["Hos_INF_1"]], lambda = model.point[["Hos_INF_1"]],
log = log)
return(l+m)
}
dTrajObs<- function (fitmodel, theta, init.state, data, log = FALSE)
{
times <- seq(from= 1, to=365, by = 1)
traj <- fitmodel$simulate(theta, init.state, times)
dens_INF <- 0
dens_RSV <- 0
######
#####
#####
##### / 10 added below
for (i in 1:(nrow(data))) {
data.point <- unlist(data[i, ])
model.point <- unlist(traj[i, ])
dens_INF <- dens_INF + fitmodel$dPointObs_INF(data.point = data.point,
model.point = model.point, theta = theta, log = TRUE)
dens_RSV <- dens_RSV + fitmodel$dPointObs_RSV(data.point = data.point,
model.point = model.point, theta = theta, log = TRUE)
dens <- dens_RSV + dens_INF
}
return(ifelse(log, dens, exp(dens)))
}
my_dLogPosterior <- function(fitmodel, theta, init.state, data) {
# theta["l_sig"] <- as.numeric(theta["l_sig"])/2+as.numeric(theta["Idetect"])
# theta["seedI"]<- as.numeric(theta["seedI"])/2 + as.numeric(theta["l_rho"])
theta["l_rho"] <- exp(as.numeric(theta['l_rho']))
theta["Rdetect2"] <-  exp(as.numeric(theta['Rdetect2']))/(1+exp(as.numeric(theta['Rdetect2'])))
theta["Rdetect5"] <- exp(as.numeric(theta['Rdetect5']))/(1+exp(as.numeric(theta['Rdetect5'])))
theta["Idetect"] <- exp(as.numeric(theta['Idetect']))/(1+exp(as.numeric(theta['Idetect'])))
# calculate the  prior for parameter vector theta and assign to variable log.prior
log.prior <- fitmodel$dprior(theta, log = TRUE)
# calculate the log-likelihood of `theta`
# and `init.state` with respect to the data using `dTrajObs`
# and assign to a variable `log.likelihood`
log.likelihood <- dTrajObs(fitmodel, theta, init.state, data, log = TRUE)
# calulate the log-posterior using the log-prior and log-likelihood
log.posterior <- log.prior + log.likelihood
return(log.posterior)
}
#Set up initial conditions
Log.posterior.test <- function(input_params) {
theta <- list(Rdetect2=unname(input_params["Rdetect2"]), Rdetect5= unname(input_params["Rdetect5"]),
Idetect = unname(input_params["Idetect"]),
l_sig=unname(input_params["sigma"]), gammaR = gammaR, gammaI = gammaI,  RSV_Sus = RSV_Sus,
trickleI = 0.1,
Contact_Structure = Contact_structure,
num_grps = length(Age_groups),
l_rho=unname(input_params["rho"]),
bR=unname(input_params["betaR"]), bI=unname(input_params["betaI"]),
seedI = unname(input_params["seedI"]), seedR =unname(input_params["seedR"]),
R0ratI = R0ratI, R0ratR= R0ratR # ratio between R0 and beta
)
return(my_dLogPosterior(fitmodel = SIPR,
theta = theta,
init.state = initials,
data = observed.data))
}
init.theta<-c(betaR=-3.15, betaI=-2.7,Rdetect2= -5.5, Rdetect5=-6.9, Idetect=-6.2
,rho=-2, seedR=1, seedI= 10, sigma=0.7
)
proposal.sd <-c(betaR=0.001, betaI=0.001 , Rdetect2= 0.01, Rdetect5=0.001, Idetect=0.01
, seedR=0.001, seedI=0.1, sigma=0.05, rho=0.1
)
limits.lower<- c(betaR=-Inf, betaI=-Inf, Rdetect2= -Inf, Rdetect5=-Inf, Idetect=-Inf
, seedR =0, seedI=0, sigma=0, rho=log(1/365)
)
limits.upper <-c(betaR=Inf, betaI=Inf, Rdetect2= Inf, Rdetect5=Inf, Idetect=Inf
,  seedR= 90, seedI=90, sigma=1, rho=0
)
#run MCM
trace <- mcmcMH(target = Log.posterior.test, # target distribution
init.theta = init.theta , # intial parameter guess
proposal.sd = proposal.sd, # standard deviation of
limits = list(lower=limits.lower ,
upper=limits.upper),
#    adapt.size.start = 100,
#    adapt.size.cooling = 0.999,
adapt.shape.start = as.numeric(Adapt_start),
adapt.shape.stop=as.numeric(Adapt_stop),
n.iterations = as.numeric(Length_run)
# covmat = covmat_1
)
init.theta
proposal.sd
Log.posterior.test(init.theta)
SIPR$dPointObs_INF<- function (data.point, model.point, theta, log = FALSE)
{
browser()
l<- dpois(x = data.point[["Hos_INF_0"]], lambda = model.point[["Hos_INF_0"]],
log = log)
m<- dpois(x = data.point[["Hos_INF_1"]], lambda = model.point[["Hos_INF_1"]],
log = log)
return(l+m)
}
Log.posterior.test(init.theta)
data.point
model.point
data.point[["Hos_INF_0"]]
model.point[["Hos_INF_0"]]
dpois(x = data.point[["Hos_INF_0"]], lambda = model.point[["Hos_INF_0"]],
log = log)
dpois(x = as.numeric(data.point[["Hos_INF_0"]]), lambda = model.point[["Hos_INF_0"]],
log = log)
SIPR$dPointObs_RSV<- function (data.point, model.point, theta, log = FALSE)
{
l<- dpois(x = as.numeric(data.point[["Hos_RSV_0"]]), lambda = model.point[["Hos_RSV_0"]],
log = log)
m<- dpois(x = data.point[["Hos_RSV_1"]], lambda = model.point[["Hos_RSV_1"]],
log = log)
return(l+m)
}
SIPR$dPointObs_INF<- function (data.point, model.point, theta, log = FALSE)
{
browser()
l<- dpois(x = as.numeric(data.point[["Hos_INF_0"]]), lambda = model.point[["Hos_INF_0"]],
log = log)
m<- dpois(x = data.point[["Hos_INF_1"]], lambda = model.point[["Hos_INF_1"]],
log = log)
return(l+m)
}
Log.posterior.test(init.theta)
SIPR$dPointObs_RSV<- function (data.point, model.point, theta, log = FALSE)
{
l<- dpois(x = as.numeric(data.point[["Hos_RSV_0"]]), lambda = model.point[["Hos_RSV_0"]],
log = log)
m<- dpois(x = as.numeric(data.point[["Hos_RSV_1"]]), lambda = model.point[["Hos_RSV_1"]],
log = log)
return(l+m)
}
SIPR$dPointObs_INF<- function (data.point, model.point, theta, log = FALSE)
{
l<- dpois(x = as.numeric(data.point[["Hos_INF_0"]]), lambda = model.point[["Hos_INF_0"]],
log = log)
m<- dpois(x = as.numeric(data.point[["Hos_INF_1"]]), lambda = model.point[["Hos_INF_1"]],
log = log)
return(l+m)
}
Log.posterior.test(init.theta)
#run MCM
trace <- mcmcMH(target = Log.posterior.test, # target distribution
init.theta = init.theta , # intial parameter guess
proposal.sd = proposal.sd, # standard deviation of
limits = list(lower=limits.lower ,
upper=limits.upper),
#    adapt.size.start = 100,
#    adapt.size.cooling = 0.999,
adapt.shape.start = as.numeric(Adapt_start),
adapt.shape.stop=as.numeric(Adapt_stop),
n.iterations = as.numeric(Length_run)
# covmat = covmat_1
)
warnings()
# Choose the fitting parameters
Adapt_start <- 1000 # start adaption
Adapt_stop <- 1000 # stop adaption
Length_run <- 100 # length of run
#run MCM
trace <- mcmcMH(target = Log.posterior.test, # target distribution
init.theta = init.theta , # intial parameter guess
proposal.sd = proposal.sd, # standard deviation of
limits = list(lower=limits.lower ,
upper=limits.upper),
#    adapt.size.start = 100,
#    adapt.size.cooling = 0.999,
adapt.shape.start = as.numeric(Adapt_start),
adapt.shape.stop=as.numeric(Adapt_stop),
n.iterations = as.numeric(Length_run)
# covmat = covmat_1
)
View(trace)
View(trace)[[1]]
View(trace[[1]])
